<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.snake.chinese.model.Element">
    <resultMap type="com.snake.chinese.model.Element" id="elementResultMap">
        <result property="id" column="id_"/>
        <result property="name" column="name_"/>
        <result property="type" column="type_"/>
        <result property="createdTime" column="created_time"/>
    </resultMap>

    <resultMap type="com.snake.chinese.model.relation.ElementType" id="elementTypeResultMap">
        <result property="elementId" column="element_id"/>
        <result property="typeId" column="type_id"/>
    </resultMap>

    <select id="selectAll" resultMap="elementResultMap">
		select * from book_element
	</select>

    <select id="selectSome" parameterType="java.util.Map" resultMap="elementResultMap">
        select * from book_element limit #{offset},#{limit}
    </select>

    <select id="getTotalCount" resultType="java.lang.Integer">
        select count(1) from book_element
    </select>

    <select id="getObject" resultMap="elementResultMap" parameterType="java.lang.Object">
        select * from book_element where id_ = #{id}
    </select>

    <insert id="insert" parameterType="com.snake.chinese.model.Element">
        insert into book_element(id_,name_,type_,created_time)
        values(#{id},#{name},#{type},now())
        <selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
            select last_insert_id() as id
        </selectKey>
    </insert>

    <update id="update" parameterType="com.snake.chinese.model.Element">
        update book_element
        <set>
            <if test="name != null">
              name_=#{name},
            </if>
            <if test="type != null">
              type_=#{type},
            </if>
        </set>
        where id_ = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Object">
        delete from book_element where id_ = #{id}
    </delete>

    <select id="findOneByMap" resultMap="elementResultMap">
        select * from book_element where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} = #{param.value}
        </foreach>
        limit 0, 1
    </select>

    <select id="findOneByObject" parameterType="com.snake.chinese.model.Element" resultMap="elementResultMap">
        select * from book_element
        <where>
            <if test="name != null">
                and name_=#{name}
            </if>
            <if test="type != null">
                and type_ = #{type}
            </if>
        </where>
        limit 0, 1
    </select>

    <select id="findByMap" resultMap="elementResultMap">
        select * from book_element where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} = #{param.value}
        </foreach>
    </select>

    <select id="findByObject" parameterType="com.snake.chinese.model.Element" resultMap="elementResultMap">
        select * from book_element
        <where>
            <if test="name != null">
                and name_=#{name}
            </if>
            <if test="type != null">
                and type_ = #{type}
            </if>
        </where>
    </select>

    <select id="findByIn" resultMap="elementResultMap">
        select * from book_element where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} IN (#{param.value})
        </foreach>
    </select>

    <select id="findByLike" resultMap="elementResultMap">
        select * from book_element where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} LIKE #{param.value}
        </foreach>
    </select>

    <select id="getCount" parameterType="java.util.Map" resultType="int">
        select count(1) from book_element where 1=1
        <if test="whereClause != null">
            ${whereClause}
        </if>
    </select>

    <select id="query" parameterType="java.util.Map" resultMap="elementResultMap">
        select ${fieldsClause} from book_element where 1=1
        <if test="whereClause != null">
            ${whereClause}
        </if>
        <if test="orderClause != null">
            ${orderClause}
        </if>
        <if test="limit > 0">
            limit ${limit} offset ${offset}
        </if>
    </select>

    <select id="getAllElementType" resultMap="elementTypeResultMap">
        select element_id,type_id from book_element_type
    </select>

</mapper>