<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.snake.chinese.model.Word">
    <resultMap type="com.snake.chinese.model.Word" id="wordResultMap">
        <result property="id" column="id_"/>
        <result property="word" column="word_"/>
        <result property="count" column="count_"/>
        <result property="typeId" column="type_id"/>
        <result property="bookId" column="book_id"/>
        <result property="verified" column="verified_"/>
        <result property="createdTime" column="created_time"/>
    </resultMap>

    <select id="selectAll" resultMap="wordResultMap">
		select id_,word_,count_,type_id,book_id,verified_,created_time from book_word where verified_=1
	</select>

    <select id="selectSome" parameterType="java.util.Map" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word limit #{offset},#{limit}
    </select>

    <select id="getTotalCount" resultType="java.lang.Integer">
        select count(1) from book_word
    </select>

    <select id="getObject" resultMap="wordResultMap" parameterType="java.lang.Object">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word where id_ = #{id}
    </select>

    <insert id="insert" parameterType="com.snake.chinese.model.Word">
        insert into book_word(id_,word_,count_,type_id,book_id,created_time)
        values(#{id},#{word},#{count},#{typeId},#{bookId},now())
        <selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
            select last_insert_id() as id
        </selectKey>
    </insert>

    <update id="update" parameterType="com.snake.chinese.model.Word">
        update book_word
        <set>
            <if test="word != null">
              word_=#{word},
            </if>
            <if test="count != null">
              count_=#{count},
            </if>
            <if test="bookId != null">
              book_id=#{bookId},
            </if>
            <if test="typeId != null">
              type_id=#{typeId},
            </if>
            <if test="verified != null">
                verified_=#{verified},
            </if>
        </set>
        where id_ = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Object">
        delete from book_word where id_ = #{id}
    </delete>

    <select id="findOneByMap" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} = #{param.value}
        </foreach>
        limit 0, 1
    </select>

    <select id="findOneByObject" parameterType="com.snake.chinese.model.Word" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word
        <where>
            <if test="word != null">
                and word_=#{word}
            </if>
            <if test="typeId != null">
                and type_id = #{typeId}
            </if>
            <if test="count != null">
                and count_=#{count}
            </if>
            <if test="bookId != null">
                and book_id = #{bookId}
            </if>
            <if test="verified != null">
                and verified_=#{verified}
            </if>
        </where>
        limit 0, 1
    </select>

    <select id="findByMap" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} = #{param.value}
        </foreach>
    </select>

    <select id="findByObject" parameterType="com.snake.chinese.model.Word" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word
        <where>
            <if test="word != null">
                and word_=#{word}
            </if>
            <if test="typeId != null">
                and type_id = #{typeId}
            </if>
            <if test="count != null">
                and count_=#{count}
            </if>
            <if test="bookId != null">
                and book_id = #{bookId}
            </if>
            <if test="verified != null">
                and verified_=#{verified}
            </if>
        </where>
    </select>

    <select id="findByIn" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} IN (#{param.value})
        </foreach>
    </select>

    <select id="findByLike" resultMap="wordResultMap">
        select id_,word_,count_,type_id,book_id,verified_,created_time from book_word where 1=1 AND
        <foreach item="param" index="key" collection="list"  open="" separator="AND" close="">
            ${param.name} LIKE #{param.value}
        </foreach>
    </select>

    <select id="getCount" parameterType="java.util.Map" resultType="int">
        select count(1) from book_word where 1=1
        <if test="whereClause != null">
            ${whereClause}
        </if>
    </select>

    <select id="query" parameterType="java.util.Map" resultMap="wordResultMap">
        select ${fieldsClause} from book_word where 1=1
        <if test="whereClause != null">
            ${whereClause}
        </if>
        <if test="orderClause != null">
            ${orderClause}
        </if>
        <if test="limit > 0">
            limit ${limit} offset ${offset}
        </if>
    </select>

    <insert id="batchInsert" parameterType="java.util.List">
        insert into book_word (id_,word_,type_id,count_,book_id,created_time) values
        <foreach collection="list" item="each" separator=",">
            (#{each.id},#{each.word},#{each.typeId},#{each.count},#{each.bookId},#{each.createdTime})
        </foreach>
    </insert>
    <delete id="deleteByBookId" parameterType="java.lang.Object">
        delete from book_word where book_id = #{id}
    </delete>

</mapper>